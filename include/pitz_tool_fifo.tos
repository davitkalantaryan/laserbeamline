/*
 *	File: pitz_tool_fifo.tos
 *
 *	Created on: 04 Feb 2017
 *	Created by: Davit Kalantaryan (Email: davit.kalantaryan@desy.de)
 *
 *  This file implements ...
 *
 */
#ifndef PITZ_TOOL_FIFO_TOS
#define PITZ_TOOL_FIFO_TOS

#ifndef DECENT_TOOL_FIFO_HPP
//#error this file could not be include directly
#include "pitz_tool_fifo.hpp"
#endif  // #ifndef DECENT_TOOL_FIFO_HPP

#include <stdio.h>
#include <stdarg.h>


template <typename TypeData>
pitz::tools::FiFo<TypeData>::FiFo()
    :
      m_InitialTaskBuffer(TypeData()),
      m_pFirstTask(NULL),
      m_pLastTask(NULL)
{
}


template <typename TypeData>
pitz::tools::FiFo<TypeData>::~FiFo()
{
    fifoListItem<TypeData> *pItemTodelete, *pItemTemp;

    m_task_mutex.lock();
    pItemTodelete = m_pFirstTask ? m_pFirstTask->next : NULL;
    while(pItemTodelete)
    {
        pItemTemp = pItemTodelete->next;
        if(pItemTodelete != (&m_InitialTaskBuffer)){delete pItemTodelete;}
        pItemTodelete = pItemTemp;
    }
    m_task_mutex.unlock();
}


template <typename TypeData>
bool pitz::tools::FiFo<TypeData>::GetFirstData(TypeData* a_pFirstDataBuffer)
{
    bool bRet(false);
    fifoListItem<TypeData>* pTmp = NULL;

    m_task_mutex.lock();
    if(m_pFirstTask)
    {
        *a_pFirstDataBuffer = m_pFirstTask->data;
        if(m_pFirstTask->next)
        {
            pTmp = m_pFirstTask->next;
            //memcpy(m_pFirstTask,m_pFirstTask->next,sizeof(struct taskListItem<TypeInp,TypeTaskFnc>));
            *m_pFirstTask = *(m_pFirstTask->next);
            if(pTmp != (&m_InitialTaskBuffer)){delete pTmp;}  // if is not needed?
        }
        else {m_pFirstTask = NULL;}
        bRet = true;
    } // if(m_pFirstTask)
    m_task_mutex.unlock();

    return bRet;
}


template <typename TypeData>
void pitz::tools::FiFo<TypeData>::AddNewData(const TypeData& a_data)
{
    m_task_mutex.lock();
    if(!m_pFirstTask)
    {
        m_pFirstTask = m_pLastTask = &m_InitialTaskBuffer;

        m_pLastTask->next = NULL;
        m_pLastTask->data = a_data;
    }
    else
    {
        m_pLastTask->next = new fifoListItem<TypeData>(a_data);
        m_pLastTask = m_pLastTask->next;
    }
    m_task_mutex.unlock();
}


#endif // PITZ_TOOL_FIFO_TOS
